#!/bin/bash

if [[ $TERM == "" || $TERM == "dumb" ]]; then
    NORMAL=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    GRAY=""
    BEEP=""
else
    NORMAL=$(tput sgr0)
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    MAGENTA=$(tput setaf 5)
    GRAY=$(tput setaf 8)
    BEEP=$(tput bel)
fi

TRUE=1
FALSE=0

REPO_ROOT_DIR="${VIRTUAL_ENV}/.."
cd $REPO_ROOT_DIR

MODULE_DIRS="client common hub system_tests"
TEST_DIRS="common system_tests"

ALL_OK=$TRUE
ISSUES=""

ACTION="all"
VERBOSE=$FALSE

fatal_error ()
{
    local message="$1"
    echo "${RED}Error:${NORMAL} ${message}" >&2
    exit 1
}

usage ()
{
    command=$(basename $0)
    echo "Usage: $command [OPTIONS] [ACTION]"  >&2
    echo  >&2
    echo "Positional arguments:"  >&2
    echo "  ACTION:"  >&2
    echo "    lint           Lint the code"  >&2
    echo "    format-check   Check code formatting"  >&2
    echo "    test           Run unit tests (including code coverage)"  >&2
    echo  >&2
    echo "OPTIONS:"  >&2
    echo "  -h, --help: Display this help message"  >&2
    echo "  -v, --verbose: Verbose output"  >&2
}

progress ()
{
    local message="$1"
    echo "${NORMAL}${message}"
}

verbose ()
{
    local message="$1"
    if [[ $VERBOSE == $TRUE ]]; then
        echo "${BLUE}${message}${NORMAL}"
    fi
}

record_problem ()
{
    local output="$1"
    echo "${MAGENTA}${output}${NORMAL}"
    ALL_OK=$FALSE
}

run_command ()
{
    local command="$1"
    verbose "$command"
    if [[ $VERBOSE == $TRUE ]]; then
        echo -n $GRAY
        set -o pipefail
        eval "$command 2>&1 | tee /tmp/dske_output"
        result="$?"
        set +o pipefail
        echo -n $NORMAL
    else
        eval "$command 2>&1 >/tmp/dske_output"
        result="$?"
    fi
    if [ "$result" -ne 0 ]; then
        output=$(cat /tmp/dske_output)
        record_problem "$output"
    fi
}

issue ()
{
    local message="$1"
    echo "${RED}Issue:${NORMAL} ${message}" >&2
}

parse_command_line_arguments ()
{
    local action_set=$FALSE
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                usage
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=$TRUE
                ;;
            -*)
                fatal_error "Unrecognized OPTION $1"
                ;;
            *)
                if [[ $action_set == $TRUE ]]; then
                    fatal_error "Only one ACTION allowed"
                fi
                ACTION="$1"
                action_set=$TRUE
                ;;
        esac
        shift
    done
    case $ACTION in
        all|lint|format-check|test) ;;
        *) fatal_error "Invalid action: $action"
    esac    
}

check_virtual_environment ()
{
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        fatal_error "Virtual deployment not activated"
    fi
}

lint_all_code_using_pylint ()
{
    local dir
    for dir in $MODULE_DIRS; do
        progress "Lint $dir using pylint"
        run_command "pylint --rcfile $REPO_ROOT_DIR/pylintrc $dir"
    done
}

lint_all_code ()
{
    lint_all_code_using_pylint
}

unit_test_all_code_using_pytest ()
{
    local dir
    cov_modules=""
    for dir in $MODULE_DIRS; do
        cov_modules="$cov_modules --cov=${dir}"
    done    
    progress "Test using pytest"
    run_command "DSKE_COVERAGE=1 pytest -vv ${cov_modules} --cov-report=html --cov-report=term"
    coverage_percent=$(coverage report | grep TOTAL | tr -s ' ' | cut -d ' ' -f 4)
    echo "Code coverage: ${coverage_percent} ("open htmlcov/index.html" for details)"
}

unit_test_all_code ()
{
    unit_test_all_code_using_pytest
}

format_check_all_code_using_black ()
{
    local dir
    for dir in $MODULE_DIRS; do
        progress "Format $dir using black"
        run_command "black --quiet --check ${REPO_ROOT_DIR}/${dir}"
    done
}

format_check_all_code ()
{
    format_check_all_code_using_black
}

all_checks_and_tests_passed ()
{
    echo "${GREEN}All checks and tests passed."
    exit 0

}

not_all_checks_and_tests_passed ()
{
    echo "${RED}At least one check or test failed."
    exit 1
}

main ()
{
    parse_command_line_arguments "$@"
    check_virtual_environment
    case $ACTION in
        all|lint) lint_all_code ;;
    esac    
    case $ACTION in
        all|format-check) format_check_all_code ;;
    esac
    case $ACTION in
        all|test) unit_test_all_code ;;
    esac    
    if [ $ALL_OK == $TRUE ]; then
        all_checks_and_tests_passed
    else
        not_all_checks_and_tests_passed
    fi
}

main "$@"