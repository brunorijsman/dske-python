#!/bin/bash

if [[ $TERM == "" || $TERM == "dumb" ]]; then
    NORMAL=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    BEEP=""
else
    NORMAL=$(tput sgr0)
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    MAGENTA=$(tput setaf 5)
    BEEP=$(tput bel)
fi

TRUE=1
FALSE=0

REPO_ROOT_DIR="${VIRTUAL_ENV}/.."
cd $REPO_ROOT_DIR

MODULE_DIRS="client common hub"

ALL_OK=$TRUE
ISSUES=""

ACTION="all"

fatal_error ()
{
    local message="$1"
    echo "${RED}Error:${NORMAL} ${message}" >&2
    exit 1
}

usage ()
{
    command=$(basename $0)
    echo "Usage: $command [OPTIONS] [ACTION]"  >&2
    echo  >&2
    echo "Positional arguments:"  >&2
    echo "  ACTION:"  >&2
    echo "    lint           Lint the code"  >&2
    echo "    format-check   Check code formatting"  >&2
    echo "    test           Run unit tests (including code coverage)"  >&2
    echo  >&2
    echo "OPTIONS:"  >&2
    echo "  -h, --help: Display this help message"  >&2
}

progress ()
{
    local message="$1"
    echo "${NORMAL}${message}"
}

issue ()
{
    local message="$1"
    echo "${RED}Issue:${NORMAL} ${message}" >&2
}

parse_command_line_arguments ()
{
    # TODO - error if more than one action
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                usage
                exit 0
                ;;
            *)
                ACTION="$1"
                ;;
        esac
        shift
    done
    case $ACTION in
        all|lint|format-check|test) ;;
        *) fatal_error "Invalid action: $ACTION"
    esac    
}

check_virtual_environment ()
{
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        fatal_error "Virtual deployment not activated"
    fi
}

record_problem ()
{
    local output="$1"
    echo "${MAGENTA}${output}${NORMAL}"
    ALL_OK=$FALSE
}

lint_all_code_using_pylint ()
{
    # TODO: Do we need the find command below? Can't we just pylint the directory?
    for DIR in $MODULE_DIRS; do
        progress "Lint $DIR using pylint"
        output=$( \
            pylint \
            --rcfile $REPO_ROOT_DIR/pylintrc \
            $(find ${DIR} -name \*.py) \
            2>&1 \
        )
        if [ "$?" -ne 0 ]; then
            record_problem "$output"
        fi
    done
}

lint_all_code ()
{
    lint_all_code_using_pylint
}

unit_test_all_code_using_pytest ()
{
    cov_modules=""
    for dir in $MODULE_DIRS; do
        cov_modules="$cov_modules --cov=${dir}"
    done    
    # TODO: So far, we only have tests for the common module.
    # for DIR in $MODULE_DIRS; do
    for DIR in common; do
        progress "Unit test $DIR using pytest"
        output=$(pytest ${cov_modules} --cov-report=html --cov-report=term ${DIR} 2>&1)
        if [ "$?" -ne 0 ]; then
            record_problem "$output"
        fi
    done
}

unit_test_all_code ()
{
    unit_test_all_code_using_pytest
}

format_check_all_code_using_black ()
{
    for DIR in $MODULE_DIRS; do
        progress "Format $DIR using black"
        output=$(black --check ${REPO_ROOT_DIR}/${DIR} 2>&1)
        if [ "$?" -ne 0 ]; then
            record_problem "$output"
        fi
    done
}

format_check_all_code ()
{
    format_check_all_code_using_black
}

okay_to_commit ()
{
    echo "${GREEN}All good; you can commit."
    exit 0

}

not_okay_to_commit ()
{
    echo "${RED}There was at least one issue; do not commit."
    exit 1
}

main ()
{
    parse_command_line_arguments "$@"
    check_virtual_environment
    case $ACTION in
        all|lint) lint_all_code ;;
    esac    
    case $ACTION in
        all|test) unit_test_all_code ;;
    esac    
    case $ACTION in
        all|format-check) format_check_all_code ;;
    esac
    if [ $ALL_OK == $TRUE ]; then
        okay_to_commit
    else
        not_okay_to_commit
    fi
}

main $@